/* Author: huma23, github.com/huma23
 * 
 * This file is part of the Wahlzeit photo rating application.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with this program. If not, see
 * <http://www.gnu.org/licenses/>.
 */
package org.wahlzeit.model.coordinate;

import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;

/**
 * A CartesianCoordinate represents one coordinate in a cartesian space
 */
public class CartesianCoordinate extends AbstractCoordinate{

	private double x;
	private double y;
	private double z;
	
	/**
	 * Constructor for creating an instance of a CartesianCoordinate
	 * @param x
	 * @param y
	 * @param z
	 */
	public CartesianCoordinate(double x, double y, double z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	
	/**
	 * Compares the values of each axis and returns true if equal.
	 * @param coordinate
	 * @return
	 */
	@Override
	public boolean isEqual(Coordinate coordinate) {
		
		assertCoordinateIsNotNull(coordinate);
		
		return Math.abs(this.x - coordinate.asCartesianCoordinate().x) <= EPSILON 
				&& Math.abs(this.y - coordinate.asCartesianCoordinate().y) <= EPSILON 
				&& Math.abs(this.z - coordinate.asCartesianCoordinate().z) <= EPSILON;
	}
	
	/**
	 * Generated by eclipse
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		long temp;
		temp = Double.doubleToLongBits(x);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(y);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(z);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		return result;
	}
	
	/**
	 * Returns a string with the format: "(x / y / z)"
	 * The  values are represented with two decimals.
	 */
	@Override
	public String toString() {
		
		DecimalFormatSymbols symbol = new DecimalFormatSymbols();
		symbol.setDecimalSeparator(',');
		symbol.setGroupingSeparator('.');
		DecimalFormat format = new DecimalFormat("#0.00", symbol);
		
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.append("(x / y / z): (");
		stringBuilder.append(format.format(x));
		stringBuilder.append(" / ");
		stringBuilder.append(format.format(y));
		stringBuilder.append(" / ");
		stringBuilder.append(format.format(z));
		stringBuilder.append(")");
		return stringBuilder.toString();
	}

	/**
	 * Returns the current object, because it is already an instance of a CartesianCoordinate
	 */
	@Override
	public CartesianCoordinate asCartesianCoordinate() {	
		return this;
	}

	/**
	 * Converts this CartesianCoordinate to a SquericCoordinate.
	 */
	@Override
	public SphericCoordinate asSphericCoordinate() {
		
		double radius = Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2) + Math.pow(this.z, 2));
		double latitude = Math.toDegrees(Math.atan(this.y / this.x));
		double longitude = Math.toDegrees(Math.atan(Math.sqrt((Math.pow(this.x, 2)) + Math.pow(this.y, 2)) / this.z));
		
		return new SphericCoordinate(latitude, longitude, radius);
	}

	/*
	 * Getters for this class 
	 */
	public double getX() {
		return x;
	}

	public double getY() {
		return y;
	}

	public double getZ() {
		return z;
	}
}
